// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.4
// source: movieServices.proto

package movie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...grpc.CallOption) (*GetAllMoviesResponse, error)
	GetMovieByGenre(ctx context.Context, in *GetMovieByGenreRequest, opts ...grpc.CallOption) (*GetMovieByGenreResponse, error)
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
	UpdateMovieRating(ctx context.Context, in *UpdateMovieRatingRequest, opts ...grpc.CallOption) (*UpdateMovieRatingResponse, error)
	DeleteAllMovies(ctx context.Context, in *DeleteAllMoviesRequest, opts ...grpc.CallOption) (*DeleteAllMoviesResponse, error)
	DeleteMovieByGenre(ctx context.Context, in *DeleteMovieByGenreRequest, opts ...grpc.CallOption) (*DeleteMovieByGenreResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/movie.MovieService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...grpc.CallOption) (*GetAllMoviesResponse, error) {
	out := new(GetAllMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/GetAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovieByGenre(ctx context.Context, in *GetMovieByGenreRequest, opts ...grpc.CallOption) (*GetMovieByGenreResponse, error) {
	out := new(GetMovieByGenreResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/GetMovieByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovieRating(ctx context.Context, in *UpdateMovieRatingRequest, opts ...grpc.CallOption) (*UpdateMovieRatingResponse, error) {
	out := new(UpdateMovieRatingResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/UpdateMovieRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteAllMovies(ctx context.Context, in *DeleteAllMoviesRequest, opts ...grpc.CallOption) (*DeleteAllMoviesResponse, error) {
	out := new(DeleteAllMoviesResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/DeleteAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovieByGenre(ctx context.Context, in *DeleteMovieByGenreRequest, opts ...grpc.CallOption) (*DeleteMovieByGenreResponse, error) {
	out := new(DeleteMovieByGenreResponse)
	err := c.cc.Invoke(ctx, "/movie.MovieService/DeleteMovieByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	GetAllMovies(context.Context, *GetAllMoviesRequest) (*GetAllMoviesResponse, error)
	GetMovieByGenre(context.Context, *GetMovieByGenreRequest) (*GetMovieByGenreResponse, error)
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	UpdateMovieRating(context.Context, *UpdateMovieRatingRequest) (*UpdateMovieRatingResponse, error)
	DeleteAllMovies(context.Context, *DeleteAllMoviesRequest) (*DeleteAllMoviesResponse, error)
	DeleteMovieByGenre(context.Context, *DeleteMovieByGenreRequest) (*DeleteMovieByGenreResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMovieServiceServer) GetAllMovies(context.Context, *GetAllMoviesRequest) (*GetAllMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieByGenre(context.Context, *GetMovieByGenreRequest) (*GetMovieByGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByGenre not implemented")
}
func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovieRating(context.Context, *UpdateMovieRatingRequest) (*UpdateMovieRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieRating not implemented")
}
func (UnimplementedMovieServiceServer) DeleteAllMovies(context.Context, *DeleteAllMoviesRequest) (*DeleteAllMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMovies not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovieByGenre(context.Context, *DeleteMovieByGenreRequest) (*DeleteMovieByGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieByGenre not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/GetAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetAllMovies(ctx, req.(*GetAllMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovieByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/GetMovieByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieByGenre(ctx, req.(*GetMovieByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovieRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovieRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/UpdateMovieRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovieRating(ctx, req.(*UpdateMovieRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/DeleteAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteAllMovies(ctx, req.(*DeleteAllMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovieByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovieByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/DeleteMovieByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovieByGenre(ctx, req.(*DeleteMovieByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MovieService_SayHello_Handler,
		},
		{
			MethodName: "GetAllMovies",
			Handler:    _MovieService_GetAllMovies_Handler,
		},
		{
			MethodName: "GetMovieByGenre",
			Handler:    _MovieService_GetMovieByGenre_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovieRating",
			Handler:    _MovieService_UpdateMovieRating_Handler,
		},
		{
			MethodName: "DeleteAllMovies",
			Handler:    _MovieService_DeleteAllMovies_Handler,
		},
		{
			MethodName: "DeleteMovieByGenre",
			Handler:    _MovieService_DeleteMovieByGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movieServices.proto",
}
